services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: cobit-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: cobit
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - cobit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cobit"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicaci贸n Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cobit-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Variables de entorno para la aplicaci贸n
      NODE_ENV: production

      # Configuraci贸n de base de datos
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: root
      DB_DATABASE: cobit

      # Next.js
      NEXT_TELEMETRY_DISABLED: 1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cobit-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer para administraci贸n de DB (opcional)
  adminer:
    image: adminer:latest
    container_name: cobit-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - cobit-network

volumes:
  postgres_data:
    driver: local

networks:
  cobit-network:
    driver: bridge
